(define sqare (lambda(x) ( * x x )))

(define (sqrt x)
    (newton (lambda(y)(- x (sqare y)))
            1))


(define (newton f guess)
    (define Df (deriv f))
    (fixed-point
     (lambda(x)(- x (/ (f x) (Df x))))
     guess))

#求导
(define deriv
    (lambda(f)
      (lambda(x)
        (/ (- (f (+ x dx))
              (f x))
           dx))))

(define dx 0.00001)

#不动点
(define tolerance 0.00001)

(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) tolerance))
    (define (try guess)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try first-guess))
