(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))

(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b (- counter 1) (* b counter))))


;;;快速幂 b^n = (b ^ (n / 2)) ^ 2  or b * b ^ (n - 1)

(define (fast-expt b n)
  (cond ((= n 0) 1
        ((even? n) (square (fast-expt n (n / 2))))
        (else (* b (fast-expt b (- n 1)))))))

(define (even? n) (= (remainder n 2) 0))


